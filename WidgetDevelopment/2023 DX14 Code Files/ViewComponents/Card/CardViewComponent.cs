using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Progress.Sitefinity.AspNetCore.ViewComponents;
using Progress.Sitefinity.Renderer.Designers.Attributes;
using Progress.Sitefinity.Renderer.Entities.Content;
using Progress.Sitefinity.Renderer.Designers;
using Progress.Sitefinity.AspNetCore.Widgets.Models.Common;
using Progress.Sitefinity.Renderer.Models;
using Progress.Sitefinity.AspNetCore.ViewComponents.AttributeConfigurator.Attributes;
using Progress.Sitefinity.AspNetCore.Widgets.ViewComponents.Common;
using Progress.Sitefinity.RestSdk;
using Renderer.ViewModels.Card;
using Progress.Sitefinity.AspNetCore.RestSdk;
using Progress.Sitefinity.RestSdk.Dto;

namespace ViewComponents.Card
{
    /// <summary>
    /// Test widget with different kind of restrictions for its properties. For more information on creating widgets
    /// visit <see href="https://www.progress.com/documentation/sitefinity-cms/asp.net-core-widget-components">this page.</see>
    /// </summary>
    [SitefinityWidget]
    public class CardViewComponent : ViewComponent
    {
        public CardViewComponent(IRestClient _restClient, IStyleClassesProvider styles)
        {
            this.restClient = _restClient;
            this.styles = styles;
        }
        /// <summary>
        /// Invokes the view.
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public async Task<IViewComponentResult> InvokeAsync(IViewComponentContext<CardEntity> context)
        {
            CardViewModel model = new CardViewModel();

            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }

            await GetImageAsync(context, model);
            BuildSectionMargins(context, model);

            model.CardTitle = context.Entity.CardTitle;
            model.CardText = context.Entity.CardText;
            model.ButtonUrl = context.Entity.Link.Href;
            model.ButtonText = context.Entity.LinkText;
            model.ButtonStyle = context.Entity.ButtonStyle.ToString().ToLower();

            return this.View(context.Entity.ViewName, model);
        }


        /// <summary>
        /// Build CSS Margin Class from Syles Provider
        /// </summary>
        /// <param name="context">Component Conext</param>
        /// <param name="model">View Model</param>
        private void BuildSectionMargins(IViewComponentContext<CardEntity> context, CardViewModel model)
        {
            switch (context.Entity.TextAlignment)
            {
                case TextAlignment.Center:
                    model.TextAlign = "center";
                    break;
                case TextAlignment.Right:
                    model.TextAlign = "end";
                    break;
                case TextAlignment.Left:
                default:
                    model.TextAlign = "start";
                    break;
            }

            var margins = this.styles.GetMarginsClasses(context.Entity.SectionMargin);
            if (!string.IsNullOrEmpty(margins))
            {
                model.SectionCss = margins;
            }
        }
        /// <summary>
        /// Get Selected image from Sitefinity Async
        /// </summary>
        /// <param name="context">Component context</param>
        /// <param name="model">View Model</param>
        /// <returns></returns>
        private async Task GetImageAsync(IViewComponentContext<CardEntity> context, CardViewModel model)
        {
            if (context.Entity.Image.HasSelectedItems())
            {
                var imageResult = await restClient.GetItems<ImageDto>(context.Entity.Image);
                if (imageResult.Items.Count > 0)
                {
                    model.Image = imageResult.Items[0];
                }
            }
        }

        IStyleClassesProvider styles;
        IRestClient restClient;
    }

    /// <summary>
    /// The test model for the load tests widget. For a list of supported properties
    /// visit <see href="https://www.progress.com/documentation/sitefinity-cms/autogenerated-field-types">this page.</see>
    /// </summary>
    public class CardEntity
    {
        #region Card Section
        [ContentSection(cardSectionName)]
        [Content(Type = KnownContentTypes.Images, AllowMultipleItemsSelection = false)]
        [Required]
        public MixedContentContext Image { get; set; }

        [ContentSection(cardSectionName)]
        [DisplayName("Card Title")]
        [Required]
        public string CardTitle { get; set; }

        [ContentSection(cardSectionName)]
        [DisplayName("Card Text")]
        [DataType(customDataType: KnownFieldTypes.TextArea)]
        public string CardText { get; set; }

        [ContentSection(cardSectionName)]
        [DisplayName("Text Alignment")]
        [DefaultValue(TextAlignment.Left)]
        public TextAlignment TextAlignment { get; set; }

        [ContentSection(cardSectionName)]
        [DisplayName("Margin")]
        [TableView("Section")]
        public MarginStyle SectionMargin { get; set; }
        #endregion

        #region Button Section

        [ContentSection(buttonSectionName)]
        [Description("Page, Content Item, or Url")]
        public LinkModel Link { get; set; }

        [ContentSection(buttonSectionName)]
        [DisplayName("Link Text")]
        public string LinkText { get; set; }

        [ContentSection(buttonSectionName)]
        [DisplayName("Button Style")]
        [DefaultValue("primary")]
        public BootstrapColor ButtonStyle { get; set; }
        #endregion

        #region Template Section
        [ContentSection("Template")]
        [DisplayName("Template")]
        [DefaultValue("Default")]
        [ViewSelector]
        public string ViewName { get; set; }
        #endregion

        private const string buttonSectionName = "Button";
        private const string cardSectionName = "Card";
    }

    public enum BootstrapColor
    {
        Primary,
        Secondary,
        Success,
        Info,
        Light,
        Dark,
        Link,
        Warning,
        Danger
    }

    public enum TextAlignment
    {
        Left,
        Center,
        Right
    }
}
